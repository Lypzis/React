{"version":3,"sources":["components/Cockpit/Cockpit.css","components/Persons/Person/Person.css","containers/App.css","components/Persons/Person/Person.js","components/Persons/Persons.js","components/Cockpit/Cockpit.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Cockpit","red","green","bold","Person","paragraph","App","person","props","console","log","react_default","a","createElement","className","personClasses","onClick","clicked","name","age","type","onChange","changed","Persons","map","index","Person_Person","key","id","bind","event","classes","persons","length","push","cockpitClasses","btnClass","show","title","join","toggle","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","otherState","showPersons","deletePersonHandler","personIndex","toConsumableArray","splice","setState","nameChangedHandler","findIndex","target","value","togglePersonsHandler","doesShow","components_Persons_Persons","appClasses","components_Cockpit_Cockpit","appTitle","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e05929cc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Cockpit\":\"Cockpit__Cockpit__iuz7I\",\"red\":\"Cockpit__red__3H17r\",\"green\":\"Cockpit__green__34Nyi\",\"bold\":\"Cockpit__bold__uRU0B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Person\":\"Person__Person__37wpp\",\"paragraph\":\"Person__paragraph__OV4NY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App__App__2NQx7\"};","import React from 'react';\n//import Radium from 'radium';\nimport personClasses from'./Person.css';\n\nconst person = props => {\n    console.log('[Person.js] rendering...');\n\n/* Only for testing the error boundary\n    const rnd = Math.random();\n\n    if(rnd > .7) {\n        throw new Error('Random Stupidity Elected');\n    }\n*/\n    return (\n        <div className={personClasses.Person} >\n            <p onClick={props.clicked} className={personClasses.paragraph}>I'm {props.name} and I am {props.age} years old!</p>\n            <input type=\"text\" onChange={props.changed}/>\n        </div>\n    );\n}\n\nexport default person; //Radium(person)","import React from 'react';\nimport Person from './Person/Person';\n\n// list of person components\nconst Persons = props => {\n    console.log('[Persons.js] rendering...');\n    return props.person.map((person, index) => {\n\n        // use 'bind' and never 'this.switchNameHandler('Marx')' \n        // alternativelly to bind uses: '() => this.switchNameHandler()', though, not best practice\n        // wraps person, to check/prevent for errors\n        return (\n            <Person\n                key={person.id}\n                name={person.name}\n                age={person.age}\n\n                clicked={props.clicked.bind(this, index)}\n                changed={event => props.changed(event, person.id)} />\n        );\n        //<ErrorBoundary></ErrorBoundary> would wrap Person component\n    });\n}\n\nexport default Persons;","import React from 'react';\n\nimport cockpitClasses from './Cockpit.css';\n\n// the \"main\" component, first to show\nconst Cockpit = props => {\n    console.log('[Cockpit.js] rendering...')\n    // creating a class list\n    let classes = [];\n\n    // dinamic classes\n    if (props.persons.length <= 2) {\n        classes.push(cockpitClasses.red);\n    }\n\n    if (props.persons.length < 2) {\n        classes.push(cockpitClasses.bold);\n    }\n\n    let btnClass = '';\n\n    if (props.show)\n        btnClass = cockpitClasses.red;\n\n    return (\n        <div className={cockpitClasses.Cockpit}>\n            <h1>{props.title}</h1>\n            <p className={classes.join(' ')}>This is really working!!! :O</p>\n            <button\n                className={btnClass}\n                onClick={props.toggle}\n            >Toggle Persons</button>\n        </div>\n    )\n};\n\nexport default Cockpit;","import React, { Component } from 'react';\n//import Radium, { StyleRoot } from 'radium';\nimport appClasses from './App.css';\nimport Persons from '../components/Persons/Persons';\nimport Cockpit from '../components/Cockpit/Cockpit';\n//import ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\n\nclass App extends Component {\n\n  // optional\n  constructor(props) {\n    super(props);\n    console.log('[App.js] constructor');\n\n    // old syntax of declaring state\n    /*\n    this.state = {\n      // array of objects\n      person: [\n        { id: 'aaa', name: 'Max', age: 28 },\n        { id: 'aab', name: 'Manu', age: 29 },\n        { id: 'abb', name: 'Stephanie', age: 27 }\n      ],\n      otherState: 'some other value hey',\n      showPersons: false\n    } */\n  }\n\n  // only available in class based components\n  // an state object, use it responsibly\n  // the other option to this are 'HOOKS'\n  // modern syntax of decaring state.\n  state = {\n    // array of objects\n    person: [\n      { id: 'aaa', name: 'Max', age: 28 },\n      { id: 'aab', name: 'Manu', age: 29 },\n      { id: 'abb', name: 'Stephanie', age: 27 }\n    ],\n    otherState: 'some other value hey',\n    showPersons: false\n  } \n\n  static getDerivedStateFromProps(props, state) {\n    console.log('[App.js] getDerivedStateFromProps ', props);\n\n    return state;\n  }\n\n  // legacy, use the above!\n  /*\n  componentWillMount() {\n    console.log('[App.js] componentWillMount');\n  } */\n\n  componentDidMount() {\n    console.log('[App.js] componentDidMount  yay! :D');\n  }\n\n  deletePersonHandler = personIndex => {\n    //const persons = this.state.person.slice(); // slice without argument will simply make a copy of the array, good practice :D\n    // or use spread operator to make a copy with the objects of the older array, creating a new one\n    const persons = [...this.state.person]; // only for arrays!\n    persons.splice(personIndex, 1); // removes the element of respective index, from the copy array\n    this.setState({ person: persons }); // updates state with the new array\n  }\n\n  nameChangedHandler = (event, id) => {\n    const personIndex = this.state.person.findIndex(person => person.id === id); // find respective person id\n\n    //const person = {...this.state.person[personIndex]}; // makes a copy of the respective object\n    //person.name = event.target.value; // change the respective object name by the target value\n    //const persons = [...this.state.person]; // copy state persons array\n    //persons[personIndex] = person; // update respective person from persons array with new person object information\n\n    // OR\n    const persons = [...this.state.person]; // copy state person array\n    persons[personIndex].name = event.target.value; // change the respective person object name from the copy array by the target value\n\n    this.setState({ person: persons }); // update state with the new information\n  }\n\n  // if showing, set to false, else to true, denying itself\n  togglePersonsHandler = () => {\n    const doesShow = this.state.showPersons;\n    this.setState({ showPersons: !doesShow });\n  }\n\n  // Render elements to the dom\n  render() {\n    console.log('[App.js] render')\n\n    // for pseudo selectors in inline-styles, intall 'radium' package\n\n    let persons = null;\n\n    // the persons list block, default is null\n    if (this.state.showPersons) {\n      persons = ( //always use map (the array function, not Map, if you know what I mean ;) ) to render lists\n        <div>\n          <Persons\n            person={this.state.person}\n            clicked={this.deletePersonHandler}\n            changed={this.nameChangedHandler}\n          />\n        </div>\n      );\n    }\n\n    return (\n      // this is not html, it's .jsx :D\n      // Style root is for wrapping the component, for 'radium', used in the main component\n      //<StyleRoot>  // appClasses is now like an object  // button --> style={style}\n      <div className={appClasses.App}>\n        <Cockpit\n          title={this.props.appTitle}\n          persons={this.state.person}\n          show={this.state.showPersons}\n          toggle={this.togglePersonsHandler}\n        />\n        {\n          // cannot use if statements inside here, so this is how its done\n          persons\n        }\n      </div>\n      //</StyleRoot>\n    );\n  }\n}\n\nexport default App; //Radium(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App appTitle=\"Person Manager\" />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}