{"version":3,"sources":["components/Cockpit/Cockpit.css","components/Persons/Person/Person.css","containers/App.css","hoc/Aux.js","hoc/withClass.js","components/Persons/Person/Person.js","components/Persons/Persons.js","components/Cockpit/Cockpit.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Cockpit","red","green","bold","Person","paragraph","App","aux","props","children","withClass","WrappedComponent","className","react_default","a","createElement","Aux","onClick","this","clicked","personClasses","name","age","type","onChange","changed","Component","Persons","prevProps","prevState","message","snapshot","_this","person","map","index","Persons_Person_Person","key","id","bind","event","PureComponent","React","memo","useEffect","setTimeout","alert","classes","personsLenght","push","cockpitClasses","btnClass","show","title","join","toggle","state","otherState","showPersons","showCockpit","changeCounter","deletePersonHandler","personIndex","persons","Object","toConsumableArray","splice","setState","nameChangedHandler","findIndex","target","value","console","log","togglePersonsHandler","doesShow","toggleCockpitHandler","nextState","cockpit","components_Cockpit_Cockpit","appTitle","length","components_Persons_Persons","appClasses","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e01c62de.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Cockpit\":\"Cockpit__Cockpit__iuz7I\",\"red\":\"Cockpit__red__3H17r\",\"green\":\"Cockpit__green__34Nyi\",\"bold\":\"Cockpit__bold__uRU0B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Person\":\"Person__Person__37wpp\",\"paragraph\":\"Person__paragraph__OV4NY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App__App__2NQx7\"};","const aux = props => props.children;\n\nexport default aux;\n\n// high order components are basically components that wrapp other components giving something to them.","import React from 'react';\n\n// high order component with class that wrap its children, quite obviously :D.\n// Now it has become a function that returns a component\nconst withClass = (WrappedComponent, className) => {\n    return props => ( // breaking into minor pieces\n        <div className={className}>\n            <WrappedComponent {...props} /> \n        </div>\n    );  // spreading props will take all properties from the children objects redistribute accordingly. \n        // without it, they will not show correctly.\n}\n\nexport default withClass;","import React, { Component } from 'react'; // Fragment to replace Aux, the high order component\n//import Radium from 'radium';\nimport personClasses from './Person.css';\nimport Aux from '../../../hoc/Aux';\nimport withClass from '../../../hoc/withClass';\n\nclass Person extends Component {\n    \n\n    /* Only for testing the error boundary\n        const rnd = Math.random();\n    \n        if(rnd > .7) {\n            throw new Error('Random Stupidity Elected');\n        }\n    */\n    render() {\n        //console.log('[Person.js] rendering...');\n        return ( // className={personClasses.Person} \n            <Aux>\n                <p onClick={this.props.clicked} className={personClasses.paragraph}>I'm {this.props.name} and I am {this.props.age} years old!</p>\n                <input type=\"text\" onChange={this.props.changed} />\n            </Aux>\n        );\n    }\n\n}\n\nexport default withClass(Person, personClasses.Person); //Radium(person)","import React, { PureComponent } from 'react';\nimport Person from './Person/Person';\n\n// list of person components\nclass Persons extends PureComponent { // Pure component automatically implement 'shouldComponentUpdate'\n    /* \n     static getDerivedStateFromProps(props, state){\n         console.log('[Persons.js] getDerivedStateFromProps');\n         return state;\n     }*/\n\n    //componentWillReceiveProps(props) {\n    //  console.log('[Persons.js] componentWillReceiveProps', props);\n    //}\n\n    // Performance boost, as the name suggests, component will only update if it suffers some change\n    /* Use PureComponent if it is necessary to verify too much properties\n    shouldComponentUpdate(nextProps, nextState) {\n        console.log('[Persons.js] shouldComponentUpdate');\n        if (nextProps.person !== this.props.person ||\n            nextProps.changed !== this.props.changed ||\n            nextProps.clicked !== this.props.clicked)\n            return true; // update component\n        else\n            return false; // don't update component\n    } */\n\n    getSnapshotBeforeUpdate(prevProps, prevState) {\n        //console.log('[Persons.js] getSnapshotBeforeUpdate');\n        return { message: 'Snapshot!' };\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        //console.log('[Persons.js] componentDidUpdate');\n        //console.log(snapshot);\n    }\n\n    componentWillUnmount() {\n        //console.log('[Persons.js] componentWillUnmount');\n    }\n\n    render() {\n        //console.log('[Persons.js] rendering...');\n        return this.props.person.map((person, index) => {\n\n            // use 'bind' and never 'this.switchNameHandler('Marx')' \n            // alternativelly to bind uses: '() => this.switchNameHandler()', though, not best practice\n            // wraps person, to check/prevent for errors\n            return (\n                <Person\n                    key={person.id}\n                    name={person.name}\n                    age={person.age}\n\n                    clicked={this.props.clicked.bind(this, index)}\n                    changed={event => this.props.changed(event, person.id)} />\n            );\n            //<ErrorBoundary></ErrorBoundary> would wrap Person component\n        });\n    }\n\n}\n\nexport default Persons;","import React, { useEffect } from 'react';\n\nimport cockpitClasses from './Cockpit.css';\n\n// the \"main\" component, first to show\nconst Cockpit = props => {\n    //console.log('[Cockpit.js] rendering...');\n\n    useEffect( () => {\n        //console.log('[Cockpit.js] useEffect');\n\n        // Http request simulation...\n        setTimeout(() => { // const timer = \n            alert('Saved data to cloud!');\n        }, 1000);\n\n        return () => {\n            //clearTimeout(timer);\n            //console.log('[Cockpit.js] cleanup work in useEffect');\n        }\n    }, []); //[props.persons] will be called only on a change in persons list(in this case, otherwise, anything in the array),\n    \n    useEffect( () => {\n        //console.log('[Cockpit.js] 2nd useEffect');\n        return () => null;//console.log('[Cockpit.js] cleanup work in 2nd useEffect');\n    }); // withoud 2nd argument, it has no control of when it should run,so it will update for every lifecycle.\n\n    // creating a class list\n    let classes = [];\n\n    // dinamic classes\n    if (props.personsLenght <= 2) {\n        classes.push(cockpitClasses.red);\n    }\n\n    if (props.personsLenght < 2) {\n        classes.push(cockpitClasses.bold);\n    }\n\n    let btnClass = '';\n\n    if (props.show)\n        btnClass = cockpitClasses.red;\n\n    return (\n        <div className={cockpitClasses.Cockpit}>\n            <h1>{props.title}</h1>\n            <p className={classes.join(' ')}>This is really working!!! :O</p>\n            <button\n                className={btnClass}\n                onClick={props.toggle}\n            >Toggle Persons</button>\n        </div>\n    )\n};\n\nexport default React.memo(Cockpit); // React will only re-render this component if it changes, memorizing its current state.","import React, { Component } from 'react';\n//import Radium, { StyleRoot } from 'radium';\nimport appClasses from './App.css';\nimport Persons from '../components/Persons/Persons';\nimport Cockpit from '../components/Cockpit/Cockpit';\n//import ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\nimport withClass from '../hoc/withClass';\nimport Aux from '../hoc/Aux';\n\nclass App extends Component {\n\n  // optional\n  /*constructor(props) {\n    super(props);\n    //console.log('[App.js] constructor');\n\n    // old syntax of declaring state\n    \n    this.state = {\n      // array of objects\n      person: [\n        { id: 'aaa', name: 'Max', age: 28 },\n        { id: 'aab', name: 'Manu', age: 29 },\n        { id: 'abb', name: 'Stephanie', age: 27 }\n      ],\n      otherState: 'some other value hey',\n      showPersons: false\n    } \n  }*/\n\n  // only available in class based components\n  // an state object, use it responsibly\n  // the other option to this are 'HOOKS'\n  // modern syntax of decaring state.\n  state = {\n    // array of objects\n    person: [\n      { id: 'aaa', name: 'Max', age: 28 },\n      { id: 'aab', name: 'Manu', age: 29 },\n      { id: 'abb', name: 'Stephanie', age: 27 }\n    ],\n    otherState: 'some other value hey',\n    showPersons: false,\n    showCockpit: true,\n    changeCounter: 0\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    //console.log('[App.js] getDerivedStateFromProps ', props);\n\n    return state;\n  }\n\n  // legacy, use the above!\n  /*\n  componentWillMount() {\n    console.log('[App.js] componentWillMount');\n  } */\n\n  componentDidMount() {\n    //console.log('[App.js] componentDidMount  yay! :D');\n  }\n\n  componentDidUpdate() {\n    //console.log('[App.js] componentDidUpdate');\n  }\n\n  shouldComponentUpdate(prevState, nextState) {\n    //console.log('[App.js] shouldComponentUpdate');\n    return true; // prevent update with value 'false', default is true, which will then update\n  }\n\n  deletePersonHandler = personIndex => {\n    //const persons = this.state.person.slice(); // slice without argument will simply make a copy of the array, good practice :D\n    // or use spread operator to make a copy with the objects of the older array, creating a new one\n    const persons = [...this.state.person]; // only for arrays!\n    persons.splice(personIndex, 1); // removes the element of respective index, from the copy array\n    this.setState({ person: persons }); // updates state with the new array\n  }\n\n  nameChangedHandler = (event, id) => {\n    const personIndex = this.state.person.findIndex(person => person.id === id); // find respective person id\n\n    //const person = {...this.state.person[personIndex]}; // makes a copy of the respective object\n    //person.name = event.target.value; // change the respective object name by the target value\n    //const persons = [...this.state.person]; // copy state persons array\n    //persons[personIndex] = person; // update respective person from persons array with new person object information\n\n    // OR\n    const persons = [...this.state.person]; // copy state person array\n    persons[personIndex].name = event.target.value; // change the respective person object name from the copy array by the target value\n\n    // best practice to update the state \n    this.setState((prevState, props) => {\n      return {\n        person: persons,\n        changeCounter: prevState.changeCounter + 1 // refers to previous state, to avoid asynchronous misscalculations/errors\n      }\n      // update state with the new information\n    });\n    console.log(this.state.changeCounter);\n  }\n\n  // if showing, set to false, else to true, denying itself\n  togglePersonsHandler = () => {\n    const doesShow = this.state.showPersons;\n    this.setState({ showPersons: !doesShow });\n  }\n\n  toggleCockpitHandler = () => {\n    const doesShow = this.state.showCockpit;\n    this.setState({ showCockpit: !doesShow });\n  }\n\n  // Render elements to the dom\n  render() {\n    //console.log('[App.js] render')\n\n    // for pseudo selectors in inline-styles, intall 'radium' package\n\n    let persons = null;\n    let cockpit = (\n      <div>\n        <Cockpit\n          title={this.props.appTitle}\n          personsLenght={this.state.person.length}\n          show={this.state.showPersons}\n          toggle={this.togglePersonsHandler}\n        />\n      </div>\n    );\n\n    // the persons list block, default is null\n    if (this.state.showPersons) {\n      persons = ( //always use map (the array function, not Map, if you know what I mean ;) ) to render lists\n        <div>\n          <Persons\n            person={this.state.person}\n            clicked={this.deletePersonHandler}\n            changed={this.nameChangedHandler}\n          />\n        </div>\n      );\n    }\n\n    if (!this.state.showCockpit) {\n      cockpit = null;\n    }\n\n    return (\n      // this is not html, it's .jsx :D\n      // Style root is for wrapping the component, for 'radium', used in the main component\n      //<StyleRoot>  // appClasses is now like an object  // button --> style={style}\n      <Aux>\n        <button onClick={this.toggleCockpitHandler}>Remove Cockpit</button>\n        {cockpit}\n        {\n          // cannot use if statements inside here, so this is how its done\n          persons\n        }\n      </Aux>\n      //</StyleRoot>\n    );\n  }\n}\n\nexport default withClass(App, appClasses.App); // //Radium(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App appTitle=\"Person Manager\" />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}